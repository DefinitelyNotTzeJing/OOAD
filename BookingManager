import java.util.Scanner;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.io.File;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;


public class BookingManager 
{
    Scanner scanner = new Scanner(System.in);
    private static int bookingIdCounter = 1;
    private static final SimpleDateFormat DATE_FORMAT = new SimpleDateFormat("yyyy-MM-dd");
    private static final SimpleDateFormat TIME_FORMAT = new SimpleDateFormat("HH:mm");
    
    //create booking method
    public void bookingCreate()
    {
        Scanner bookingCreateInput = new Scanner(System.in);    
        System.out.println("\nEnter booking details");
    
        String name = "";
        boolean validName = false;
        while (!validName)
        {
            System.out.print("Enter your name: ");
            name = bookingCreateInput.nextLine();
            if (!name.matches("[0-9]+"))
            {
                validName = true;
            } else 
            {
                System.out.println("Wrong format. Name cannot contain numerical characters. Please re-enter.");
            }
        }
    
        String date = "";
        boolean validDate = false;
        while (!validDate) 
        {
            System.out.print("Enter date (yyyy-MM-dd): ");
            date = bookingCreateInput.nextLine();
            try 
            {
                DATE_FORMAT.parse(date);
                validDate = true;
            } catch (ParseException e) 
            {
                System.out.println("Wrong format. Please enter date in format yyyy-MM-dd");
            }
        }
    
        String time = "";
        boolean validTime = false;
        while (!validTime) 
        {
            System.out.print("Enter time (HH:mm): ");
            time = bookingCreateInput.nextLine();
            try 
            {
                TIME_FORMAT.parse(time);
                validTime = true;
            } catch (ParseException e) 
            {
                System.out.println("Wrong format. Please enter time in format HH:mm");
            }
        }
    
        File driverFile = new File("driver.txt");
        try
        {
            Scanner driverFileReader = new Scanner(driverFile);
            while (driverFileReader.hasNextLine())
            {
                String driverData = driverFileReader.nextLine();
                String[] driverDataArray = driverData.split(",");
                String driverName = driverDataArray[0];
                String driverTotalRating = driverDataArray[1];
                String driverRatingNum = driverDataArray[2];

                double aDriverTotalRating = Double.parseDouble(driverTotalRating); //convert string to double
                int aDriverRatingNum = Integer.parseInt(driverRatingNum);
                double avgRating = aDriverTotalRating/aDriverRatingNum;

                System.out.println("\nDriver Name: " + driverName);
                System.out.println("Driver average rating: " + avgRating + "(" + aDriverRatingNum + ")");
            }
            driverFileReader.close();

            //input to choose driver
        }catch (IOException e)
        {
            System.out.println("An error occured");
        }
        
        int paymentChoice = 0;
        boolean validPaymentChoice = false;
        while (!validPaymentChoice) 
        {
            System.out.println("\nChoose payment method:");
            System.out.println("1. QR Payment");
            System.out.println("2. Online Banking");
            String paymentInput = bookingCreateInput.nextLine();
            if (paymentInput.equals("1") || paymentInput.equals("2")) 
            {
                paymentChoice = Integer.parseInt(paymentInput);
                validPaymentChoice = true;
            } else 
            {
                System.out.println("Wrong format. Please enter 1 or 2 for payment method.");
            }
        }
        String paymentMethod = (paymentChoice == 1) ? "QR Payment" : "Online Banking";
    
        String departureLocation = "";
        boolean validDepartureLocation = false;
        while (!validDepartureLocation) 
        {
            System.out.print("Enter departure location: ");
            departureLocation = bookingCreateInput.nextLine();
            if (!departureLocation.matches("[0-9]+")) 
            {
                validDepartureLocation = true;
            } else 
            {
                System.out.println("Wrong format. Departure location cannot contain numerical characters. Please re-enter.");
            }
        }
    
        String destination = "";
        boolean validDestination = false;
        while (!validDestination) 
        {
            System.out.print("Enter destination: ");
            destination = bookingCreateInput.nextLine();
            if (!destination.matches("[0-9]+")) 
            {
                validDestination = true;
            } else 
            {
                System.out.println("Wrong format. Destination cannot contain numerical characters. Please re-enter.");
            }
        }
        bookingCreateInput.close();
        
        // Write booking details to file
        try (BufferedWriter writer = new BufferedWriter(new FileWriter("booking.txt", true))) 
        {
            //Increment and format booking ID
            File bookingFile = new File("booking.txt");
            Scanner bookingReader = new Scanner(bookingFile);
            while (bookingReader.hasNextLine())
            {
                bookingIdCounter++;
                bookingReader.nextLine();
            }
            bookingReader.close();
            String bookingId = "B" + String.format("%04d", bookingIdCounter);
            writer.write(bookingId + "|" + name + "|" + date + "|" + time + "|" + paymentMethod + "|" + departureLocation + "|" + destination);
            writer.newLine();
            System.out.println("Booking successful. Your booking ID is: " + bookingId);
        } catch (IOException e) 
        {
            System.out.println("Error writing to file: " + e.getMessage());
        }
    }


    //view booking method
    public void bookingView(String bookingIDInput) 
    {
        try
        {
            String bookingDirectory = "booking.txt";
            File bookingFile = new File(bookingDirectory);
            Scanner bookingReader = new Scanner(bookingFile);
            while (bookingReader.hasNextLine())
            {
                String bookingData = bookingReader.nextLine();
                String dataArray[] = bookingData.contains("|") ? bookingData.split("\\|") : bookingData.split(",");

                if (dataArray[0].equals(bookingIDInput))
                {
                    System.out.println("\n\n\n");
                    System.out.println("Booking ID: " + dataArray[0]);
                    System.out.println("Name: " + dataArray[1]);
                    System.out.println("Date: " + dataArray[2]);
                    System.out.println("Time: " + dataArray[3]);
                    System.out.println("Payment Method: " + dataArray[4]);
                    System.out.println("Departure location: " + dataArray[5]);
                    System.out.println("Destination: " + dataArray[6]);
                }
                //bookingReader.close();
            }

            String bookingViewOption;
            Scanner bookingViewInput = new Scanner(System.in);
            do
            {
                System.out.println("\n\nDo you want to: ");
                System.out.println("<1> Update booking");
                System.out.println("<2> Delete booking");
                System.out.println("<3> Quit");
                System.out.print("---> ");
                //Scanner bookingViewInput = new Scanner(System.in);
                bookingViewOption = bookingViewInput.nextLine();
                //bookingViewInput.close();
            }while (!bookingViewOption.equals("1") && !bookingViewOption.equals("2") && !bookingViewOption.equals("3"));

            if (bookingViewOption.equals("1")) // Update booking
            {
                System.out.println("Update Booking");
                updateBooking(bookingIDInput);
            }
            else if (bookingViewOption.equals("2")) // Delete booking
            {
                System.out.println("Delete Booking");
                deleteBooking(bookingIDInput);
            }
            else // Quit program
            {
                System.out.print("\033[H\033[2J");
            }
            
        }catch (IOException e)
        {
            System.out.println("An error has occured (booking view)");
        }
    }

    //delete booking method
    public void deleteBooking(String bookingID) 
    {
        String bookingIdToDelete = bookingID;
        String bookingDirectory = "booking.txt";
        try 
        {
            File inputFile = new File(bookingDirectory);
            File tempFile = new File("temp.txt");

            try (BufferedReader reader = new BufferedReader(new FileReader(inputFile));BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile))) 
            {

                String line;
                boolean found = false;

                while ((line = reader.readLine()) != null) 
                {
                    String[] bookingDetails = line.split("|");
                    if (bookingDetails.length > 0 && bookingDetails[0].equalsIgnoreCase(bookingIdToDelete)) 
                    {
                        found = true;
                    
                    } else 
                    {
                        writer.write(line + "\n");
                    }
                }

                if (!found) 
                {
                    System.out.println("No booking found for Booking ID: " + bookingIdToDelete);
                }
            }

            if (inputFile.delete() && tempFile.renameTo(inputFile)) 
            {
                System.out.println("Booking deleted successfully.");
            } 
            else 
            {
                System.out.println("Failed to delete booking.");
            }
        } catch (IOException e) 
        {
            System.err.println("Error deleting booking: " + e.getMessage());
        }
    }

    // update booking method
    public void updateBooking(String bookingID) 
    {
        String bookingIdToUpdate = bookingID;
        String bookingDirectory = "booking.txt";

        try (BufferedReader reader = new BufferedReader(new FileReader(bookingDirectory))) 
        {
            List<String[]> dataArray = new ArrayList<>();

            // Read lines and populate dataArray with split values
            String line;
            while ((line = reader.readLine()) != null) 
            {
                String[] bookingDetails = line.split("\\|", -1); // Use "|" as delimiter
                dataArray.add(bookingDetails);
            }

            System.out.println("DataArray contents before update:");
            for (String[] booking : dataArray) 
            {
                System.out.println(Arrays.toString(booking));
            }

            boolean found = false;
            for (int i = 0; i < dataArray.size(); i++) 
            {
                String[] bookingDetails = dataArray.get(i);
                if (bookingDetails.length >= 1 && bookingDetails[0].equals(bookingIdToUpdate)) {
                    System.out.println("Current Booking Details:");
                    displayBookingDetails(bookingDetails);

                    String updatedDetails = enterUpdatedBookingDetails(bookingDetails);
                    String[] updatedBooking = updatedDetails.split("\\|", -1); // Update booking details

                    // Ensure the updated booking retains the original bookingId
                    updatedBooking[0] = bookingIdToUpdate;

                    // Update dataArray with the modified booking details
                    dataArray.set(i, updatedBooking);

                    System.out.println("Booking details updated successfully.");
                    found = true;
                    break; // Exit the loop once booking is updated
                }
            }

            if (!found) {
                System.out.println("Booking not found for ID: " + bookingIdToUpdate);
            }

            // Write the updated dataArray back to the file
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(bookingDirectory))) {
                for (String[] booking : dataArray) {
                    StringBuilder lineBuilder = new StringBuilder();
                    for (int j = 0; j < booking.length; j++) {
                        lineBuilder.append(booking[j]);
                        if (j < booking.length - 1) {
                            lineBuilder.append("|");
                        }
                    }
                    writer.write(lineBuilder.toString());
                    writer.newLine();
                }
            } catch (IOException e) {
                System.err.println("Error writing updated booking data to file: " + e.getMessage());
            }
        } catch (IOException e) {
            System.err.println("Error updating booking: " + e.getMessage());
        }
    }
    
    private String enterUpdatedBookingDetails(String[] currentBookingDetails) { 
    	 
    	 System.out.println("Enter new details (name|date|time|payment|departure|destination):");
          return  scanner.nextLine().trim();
    }

    private void displayBookingDetails(String[] bookingDetails) 
    {
        System.out.println("Booking ID: " + bookingDetails[0]);
        System.out.println("Name: " + bookingDetails[1]);
        System.out.println("Date: " + bookingDetails[2]);
        System.out.println("Time: " + bookingDetails[3]);
        System.out.println("Payment Method: " + bookingDetails[4]);
        System.out.println("Departure Location: " + bookingDetails[5]);
        System.out.println("Destination: " + bookingDetails[6]);
        System.out.println();
    }
}
