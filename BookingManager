import java.util.Scanner;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.io.File;
import java.io.FileReader;


public class BookingManager 
{
    Scanner scanner = new Scanner(System.in);
    private static int bookingIdCounter = 1;
    private static final SimpleDateFormat DATE_FORMAT = new SimpleDateFormat("yyyy-MM-dd");
    private static final SimpleDateFormat TIME_FORMAT = new SimpleDateFormat("HH:mm");
    
    //create booking method
    public void bookingCreate()
    {
        Scanner bookingCreateInput = new Scanner(System.in);    
        System.out.println("\nEnter booking details");
    
        String name = "";
        boolean validName = false;
        while (!validName)
        {
            System.out.print("Enter your name: ");
            name = bookingCreateInput.nextLine();
            if (!name.matches("[0-9]+"))
            {
                validName = true;
            } else 
            {
                System.out.println("Wrong format. Name cannot contain numerical characters. Please re-enter.");
            }
        }
    
        String date = "";
        boolean validDate = false;
        while (!validDate) 
        {
            System.out.print("Enter date (yyyy-MM-dd): ");
            date = bookingCreateInput.nextLine();
            try 
            {
                DATE_FORMAT.parse(date);
                validDate = true;
            } catch (ParseException e) 
            {
                System.out.println("Wrong format. Please enter date in format yyyy-MM-dd");
            }
        }
    
        String time = "";
        boolean validTime = false;
        while (!validTime) 
        {
            System.out.print("Enter time (HH:mm): ");
            time = bookingCreateInput.nextLine();
            try 
            {
                TIME_FORMAT.parse(time);
                validTime = true;
            } catch (ParseException e) 
            {
                System.out.println("Wrong format. Please enter time in format HH:mm");
            }
        }
    
        File driverFile = new File("driver.txt");
        try
        {
            Scanner driverFileReader = new Scanner(driverFile);
            while (driverFileReader.hasNextLine())
            {
                String driverData = driverFileReader.nextLine();
                String[] driverDataArray = driverData.split(",");
                String driverName = driverDataArray[0];
                String driverTotalRating = driverDataArray[1];
                String driverRatingNum = driverDataArray[2];

                double aDriverTotalRating = Double.parseDouble(driverTotalRating); //convert string to double
                int aDriverRatingNum = Integer.parseInt(driverRatingNum);
                double avgRating = aDriverTotalRating/aDriverRatingNum;

                System.out.println("\nDriver Name: " + driverName);
                System.out.println("Driver average rating: " + avgRating + "(" + aDriverRatingNum + ")");
            }
            driverFileReader.close();

            //input to choose driver
        }catch (IOException e)
        {
            System.out.println("An error occured");
        }
        
        int paymentChoice = 0;
        boolean validPaymentChoice = false;
        while (!validPaymentChoice) 
        {
            System.out.println("\nChoose payment method:");
            System.out.println("1. QR Payment");
            System.out.println("2. Online Banking");
            String paymentInput = bookingCreateInput.nextLine();
            if (paymentInput.equals("1") || paymentInput.equals("2")) 
            {
                paymentChoice = Integer.parseInt(paymentInput);
                validPaymentChoice = true;
            } else 
            {
                System.out.println("Wrong format. Please enter 1 or 2 for payment method.");
            }
        }
        String paymentMethod = (paymentChoice == 1) ? "QR Payment" : "Online Banking";
    
        String departureLocation = "";
        boolean validDepartureLocation = false;
        while (!validDepartureLocation) 
        {
            System.out.print("Enter departure location: ");
            departureLocation = bookingCreateInput.nextLine();
            if (!departureLocation.matches("[0-9]+")) 
            {
                validDepartureLocation = true;
            } else 
            {
                System.out.println("Wrong format. Departure location cannot contain numerical characters. Please re-enter.");
            }
        }
    
        String destination = "";
        boolean validDestination = false;
        while (!validDestination) 
        {
            System.out.print("Enter destination: ");
            destination = bookingCreateInput.nextLine();
            if (!destination.matches("[0-9]+")) 
            {
                validDestination = true;
            } else 
            {
                System.out.println("Wrong format. Destination cannot contain numerical characters. Please re-enter.");
            }
        }
        bookingCreateInput.close();
        
        // Write booking details to file
        try (BufferedWriter writer = new BufferedWriter(new FileWriter("booking.txt", true))) 
        {
            // Increment and format booking ID
            File bookingFile = new File("booking.txt");
            Scanner bookingReader = new Scanner(bookingFile);
            while (bookingReader.hasNextLine())
            {
                bookingIdCounter++;
            }
            bookingReader.close();
            
            String bookingId = "B" + String.format("%04d", bookingIdCounter);
            writer.write(bookingId + "|" + name + "|" + date + "|" + time + "|" + paymentMethod + "|" + departureLocation + "|" + destination + "\n");
            writer.newLine();
            System.out.println("Booking successful. Your booking ID is: " + bookingId);
        } catch (IOException e) 
        {
            System.out.println("Error writing to file: " + e.getMessage());
        }
    }


    //view booking method
    public void bookingView(String bookingIDInput) 
    {
        String bookingDirectory = "booking.txt";
        try (BufferedReader reader = new BufferedReader(new FileReader(bookingDirectory))) 
        {
            while (true) 
            {
                System.out.println("\nEnter search term: (1.Booking ID,2. Departure,3. Destination) or '4' to exit:");
                System.out.println("1. Booking ID");
                System.out.println("2. Depature");
                System.out.println("3. Destination");
                System.out.println("4. Quit");
                String searchTerm = scanner.nextLine().trim();
               
                if (searchTerm.equalsIgnoreCase("Quit")) 
                {
                    System.out.println("Exiting search...");
                    break;
                }

                if (searchTerm.equalsIgnoreCase("4")) 
                {
                    System.out.println("Exiting search...");
                    break;
                }

                switch (searchTerm.toLowerCase()) 
                {
                    case "booking id","1":
                        System.out.print("Enter Booking ID: ");
                        String bookingId = scanner.nextLine().trim();
                        searchAndDisplayByBookingId(reader, bookingId);
                        break;

                    case "departure","2":
                        System.out.print("Enter Departure Location: ");
                        String departureLocation = scanner.nextLine().trim();
                        searchAndDisplayByDeparture(reader, departureLocation);
                        break;

                    case "destination","3":
                        System.out.print("Enter Destination: ");
                        String destination = scanner.nextLine().trim();
                        searchAndDisplayByDestination(reader, destination);
                        break;

                    default:
                        System.out.println("Invalid search term. Please try again.");
                        break;
                }
            }
        } catch (IOException e) 
        {
           System.err.println("Error reading file: " + e.getMessage());
        }
    }

    private void searchAndDisplayByBookingId(BufferedReader reader, String bookingId) 
    {
        String line;
        boolean found = false;

        System.out.println("\nSearching for Booking ID: " + bookingId);
        try 
        {
            while ((line = reader.readLine()) != null) 
            {
                String[]bookingDetails = line.split(",");
                if (bookingDetails.length > 0 && bookingDetails[0].equalsIgnoreCase(bookingId)) 
                {
                    displayBookingDetails(bookingDetails);
                    found = true;
                    break;
                }
            }
        }catch(IOException e) 
        {
      	    System.out.println("No bookings found departing from: " + bookingId);
        }
    }

    private void searchAndDisplayByDeparture(BufferedReader reader, String departureLocation)
    {
        String line;
        boolean found = false;
        try 
        {
            System.out.println("\nSearching for Departure Location: " + departureLocation);

            while ((line = reader.readLine()) != null) 
            {
                String[] bookingDetails = line.split(",");
                if (bookingDetails.length > 5 && bookingDetails[5].equalsIgnoreCase(departureLocation)) 
                {
                    displayBookingDetails(bookingDetails);
                    found = true;
                }
            }
        }catch(IOException e) 
        {
        	System.out.println("No bookings found departing from: " + departureLocation);
        }
    }

    private void searchAndDisplayByDestination(BufferedReader reader, String destination) 
    {
        String line;
        boolean found = false;
        try 
        {
            System.out.println("\nSearching for Destination: " + destination);

            while ((line = reader.readLine()) != null) 
            {
                String[] bookingDetails = line.split(",");
                if (bookingDetails.length > 6 && bookingDetails[6].equalsIgnoreCase(destination)) 
                {
                    displayBookingDetails(bookingDetails);
                    found = true;
                }
            }     
        }catch(IOException e) 
        {
      	  System.out.println("No bookings found departing from: " + destination);
        }
    }

    private void displayBookingDetails(String[] bookingUI) 
    {
        System.out.println("Booking ID: " + bookingUI[0]);
        System.out.println("Name: " + bookingUI[1]);
        System.out.println("Date: " + bookingUI[2]);
        System.out.println("Time: " + bookingUI[3]);
        System.out.println("Payment Method: " + bookingUI[4]);
        System.out.println("Departure Location: " + bookingUI[5]);
        System.out.println("Destination: " + bookingUI[6]);
        System.out.println();
    }
}
